Error in RMI Creation:
Note: RMI is old technology around like 1995 time so i had no success running it on by IDE

1. You must use CMD to use RMI.

2. And always compile by staying out of src folder (src folder is source folder where our packages and java files and strored)
, we should compile it from outside as it will get overall package name (i dont wnow why but just do it).

3. Dont compile one by one you will be error of interface or other methods and packages not found compile
every java file  you have in one line at once.
Example:
Dont do this:

javac src/RmiBitShiftOperation/RMIInterface/RMIInterface.java 
javac src/RmiBitShiftOperation/RMIClient/RMIClient.java 
javac src/RmiBitShiftOperation/RMIServer/RMIServer.java

Do This Instead:
javac src/RmiBitShiftOperation/RMIInterface/RMIInterface.java src/RmiBitShiftOperation/RMIClient/RMIClient.java src/RmiBitShiftOperation/RMIServer/RMIServer.java


4. If you got main class not found while running compiled byte code (yourfile.class file) check it has public static void main method or not.
If it has check your path given to run file.

Example
if i have compiled code generated by our class .java files,
and if it is in RmiBitShiftOperation package and RMIServer sub package then

Then we run it by

java RmiBitShiftOperation/RMIServer/RMIServer

also check every character and names.

5. Start rmiregistry before starting server you will get error and cmd will stop responding if not done.
Also dont start rmiregistry in package folder only run it from src folder (dont go inside any packages)


6. In server class dont make implementation in other class 
Example: InterfaceImplementation.java and RMIServer.java 
dont make 2 classes use in one class (implement the methods in RMIServer.java) only if not done you will get type cast conversion error in Client.
(but good luck with creating different classes for InterfaceImplementation and RMIServer it might work.)


7. After extending UnicastRemoteObject in server, You must use and create constructor in RMIServer and call super constructor otherwise you will get marshable and serilizable error.

Example:
Where RMIServer is class name in server (the one where we write server code)
    
    RMIServer() throws RemoteException
    {
        super();
    }

8. Thats it for erros in RMI the coding in RMI is not different but as it is old technology running it is hard thing.